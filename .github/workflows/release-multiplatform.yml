# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Release Library

on:
  push:
    tags:
      - 'v[0-9]+.*'

jobs:
  create_release:
    permissions:
      contents: write
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        continue-on-error: true
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
#      - name: Checkout repository (lib-multiplatform-proj)
#        uses: actions/checkout@v4
#      - name: Release
#        uses: softprops/action-gh-release@v1
#        if: startsWith(github.ref, 'refs/tags/')
#        with:
#          files: |
#            ./include/proj/*.hpp

  release_assets:
    name: Release assets
    permissions:
      contents: write
    needs: create_release # we need to know the upload URL
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC  compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl, clang_ios_os, clang_ios_sim]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            env: posix
            platform: linux
            arch: x86_64
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            env: posix
            platform: linux
            arch: x86_64
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            platform: windows
            arch: x64
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            env: macos
            ios_platform: MACOS
            platform: darwin
            arch: x86_64-arm64
          - os: macos-latest
            c_compiler: clang_ios_os
            cpp_compiler: clang++
            ios_platform: OS
            env: ios
            platform: darwin
            arch: ios-arm64
          - os: macos-latest
            c_compiler: clang_ios_sim
            ios_platform: SIM
            cpp_compiler: clang++
            env: ios_sim
            platform: darwin
            arch: ios-sim-arm64-x86_64
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: clang_ios_os
          - os: ubuntu-latest
            c_compiler: clang_ios_sim
          - os: windows-latest
            c_compiler: clang_ios_os
          - os: windows-latest
            c_compiler: clang_ios_sim

    steps:
    - name: Checkout repository (lib-multiplatform-proj)
      uses: actions/checkout@v4

    - uses: maxim-lobanov/setup-xcode@v1
      if: ${{ matrix.os == 'macos-latest' }}
      with:
        xcode-version: latest-stable

    - name: Install GCC11
      shell: bash
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run:  |
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt update
        sudo apt install gcc-11 g++-11 libc6-dev 
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11
        gcc --version
        sudo apt-get install -y libdeflate-dev liblzma-dev libjbig-dev 
        
    - name: Check out libtiff (Mac & Linux)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' }}
      uses: actions/checkout@master
      with:
        path: ./.libtiff
        repository: viscan-de/lib-multiplatform-tiff

    - name: Build libtiff (Mac & Linux)
      if: ${{ matrix.os == 'macos-latest' || matrix.os == 'ubuntu-latest' }}
      run: |
        cd .libtiff
        make platform=${{ matrix.env }} cxx=${{ matrix.cpp_compiler}} cc=${{ matrix.c_compiler}}
        ln -s ./.libtiff/${{ matrix.env }}/dependencies ../libtiff

    - name: Check out vcpkg (Windows)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'windows-latest' }}
      uses: actions/checkout@master
      with:
        path: ./.vcpkg
        repository: microsoft/vcpkg
        
    - name: Build libtiff (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        cd .vcpkg && bootstrap-vcpkg.bat
        vcpkg install tiff:x64-windows-static

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        #echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=$(echo "${{ github.workspace }}/build" | sed -e 's/\\/\//g')" >> "$GITHUB_OUTPUT"
        echo "workspace-dir=$(echo "${{ github.workspace }}" | sed -e 's/\\/\//g')" >> "$GITHUB_OUTPUT"
        echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
        mkdir "${{ github.workspace }}/build"
        
    - name: Build libraries with -fPIC for static linking (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        set -e
        WORKDIR="${{ steps.strings.outputs.build-output-dir }}"
        mkdir -p "$WORKDIR/lib" "$WORKDIR/include"

        # 1. Build Zstd static with -fPIC
        git clone https://github.com/facebook/zstd.git
        cd zstd
        make -j$(nproc) CFLAGS="-fPIC" CXXFLAGS="-fPIC" lib
        cp lib/libzstd.a "$WORKDIR/lib/"
        cp -r lib $WORKDIR/include/zstd_headers
        cd ..

        # 2. Build libdeflate static with -fPIC
        git clone https://github.com/ebiggers/libdeflate.git
        cd libdeflate
        cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DBUILD_SHARED_LIBS=OFF
        cmake --build build --config Release -- -j$(nproc)
        cp build/liblibdeflate.a "$WORKDIR/lib/"
        cd ..

        # 3. Re‑compile liblzma static with -fPIC
        git clone https://git.tukaani.org/xz.git xz-lzma
        cd xz-lzma
        ./configure --disable-shared --enable-static LDFLAGS=-all-static CFLAGS="-fPIC" CXXFLAGS="-fPIC"
        make -j$(nproc)
        cp liblzma/.libs/liblzma.a "$WORKDIR/lib/liblzma.a"
        cd ..

        # 4. Re‑compile libjbig static with -fPIC
        git clone https://github.com/agl/libjbig.git libjbig
        cd libjbig
        ./configure --disable-shared --enable-static CFLAGS="-fPIC" CXXFLAGS="-fPIC"
        make -j$(nproc)
        cp libjbig.a "$WORKDIR/lib/libjbig.a"
        cd ..

        # 5. List stored libs for debugging
        ls -lah "$WORKDIR/lib"

    - name: Configure CMake Linux
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: >
        CMAKE_BUILD_PARALLEL_LEVEL=4 && cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_BUILDENV_GITHUB=ON
        -DBUILD_APPS=OFF
        -DBUILD_PROJSYNC=OFF 
        -DBUILD_SHARED_LIBS=OFF
        -DTIFF_LIBRARY=./libtiff/lib 
        -DTIFF_INCLUDE_DIR=./libtiff/include
        -S ${{ github.workspace }}

    - name: Configure CMake for macOS
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      #-DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
        
      if: ${{ matrix.os == 'macos-latest' && matrix.env == 'macos' }}
      run: >
        CMAKE_BUILD_PARALLEL_LEVEL=4 && cmake -GXcode -B ${{ steps.strings.outputs.build-output-dir }} 
        -DIOS_PLATFORM=${{ matrix.ios_platform }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
        -DCMAKE_BUILDENV_GITHUB=ON
        -DBUILD_APPS=OFF 
        -DBUILD_PROJSYNC=OFF 
        -DBUILD_SHARED_LIBS=OFF
        -DTIFF_LIBRARY=./libtiff/lib 
        -DTIFF_INCLUDE_DIR=./libtiff/include
        -S ${{ github.workspace }}
        
    - name: Configure CMake for iOS
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'macos-latest' && matrix.env != 'macos' }}
      run: >
        CMAKE_BUILD_PARALLEL_LEVEL=4 && cmake -GXcode -B ${{ steps.strings.outputs.build-output-dir }} 
        -DCMAKE_TOOLCHAIN_FILE=./ios.cmake 
        -DIOS_PLATFORM=${{ matrix.ios_platform }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_BUILDENV_GITHUB=ON
        -DBUILD_APPS=OFF 
        -DBUILD_PROJSYNC=OFF 
        -DBUILD_SHARED_LIBS=OFF
        -DTIFF_LIBRARY=./libtiff/lib 
        -DTIFF_INCLUDE_DIR=./libtiff/include
        -S ${{ github.workspace }}

    - name: Configure CMake for Windows
      shell: bash
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: ${{ matrix.os == 'windows-latest' }}
      run: >
        CMAKE_BUILD_PARALLEL_LEVEL=4 && cmake -B ${{ steps.strings.outputs.build-output-dir }} 
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_BUILDENV_GITHUB=ON
        -DBUILD_APPS=OFF 
        -DBUILD_PROJSYNC=OFF 
        -DBUILD_SHARED_LIBS=OFF
        -DTIFF_LIBRARY="./.vcpkg/installed/x64-windows-static/lib"
        -DTIFF_INCLUDE_DIR="./.vcpkg/installed/x64-windows-static/include"
        -S ${{ steps.strings.outputs.workspace-dir }}

    - name: Build
      shell: bash
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        CMAKE_BUILD_PARALLEL_LEVEL=4 && cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} -t proj
        cd ${{ steps.strings.outputs.build-output-dir }}
        cd lib
        if [ -d "${{ matrix.build_type }}" ]; then
          echo "${{ matrix.build_type }} does exist."
          mv ./${{ matrix.build_type }}/* ./
          rm -rf ./${{ matrix.build_type }}
        fi

    #- name: Combine static libraries (Linux)
    #  if: ${{ matrix.os == 'ubuntu-latest' }}
    #  run: |
    #    cp ./libtiff/lib/*.a ${{ steps.strings.outputs.build-output-dir }}/lib/
    #    cd ${{ steps.strings.outputs.build-output-dir }}/lib
    #    cp /usr/lib/x86_64-linux-gnu/libdeflate.a ./
    #    cp /usr/lib/x86_64-linux-gnu/liblzma.a ./
    #    cp /usr/lib/x86_64-linux-gnu/libjbig.a ./
    #    ls -oh
    #    for f in * ; do libsfound="$libsfound\naddlib $f\n" ; done
    #    printf "create _libproj.a\n$libsfound\nsave\nend" > libproj-complete.mri
    #    ar -M <libproj-complete.mri
    #    rm libproj-complete.mri
    #    rm lib*.a
    #    mv _libproj.a libproj.a
    #    ls -oh

    #- name: Combine static libraries (Mac)
    #  if: ${{ matrix.os == 'macos-latest' }}
    #  run: |
    #    cp ./libtiff/lib/*.a ${{ steps.strings.outputs.build-output-dir }}/lib/
    #    cd ${{ steps.strings.outputs.build-output-dir }}/lib
    #    for f in * ; do libsfound="$libsfound $f" ; done
    #    xcrun libtool -static -o _libproj.a $libsfound
    #    rm lib*.a
    #    mv _libproj.a libproj.a
    #    ls -oh


    - name: Combine static libraries (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        rootsrcdir="$(pwd)"
        cd libtiff/lib
        cp ${{ steps.strings.outputs.build-output-dir }}/lib/*.a ./
        #cp /usr/lib/x86_64-linux-gnu/libdeflate.a ./
        #cp /usr/lib/x86_64-linux-gnu/liblzma.a ./
        #cp /usr/lib/x86_64-linux-gnu/libjbig.a ./
        #cp /usr/lib/x86_64-linux-gnu/libzstd.a ./

        rm ${{ steps.strings.outputs.build-output-dir }}/lib/*.a
        
        for f in * ; do libsfound="$libsfound\naddlib $f\n" ; done
        printf "create libprojcomplete.a\n$libsfound\nsave\nend" > libprojcomplete.mri
        cat libprojcomplete.mri
        ar -M <libprojcomplete.mri
        cp libprojcomplete.a ${{ steps.strings.outputs.build-output-dir }}/lib/libproj.a
        ls -oh ${{ steps.strings.outputs.build-output-dir }}/lib/

    - name: Combine static libraries (Mac OS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        rootsrcdir="$(pwd)"
        cd libtiff/lib
        cp ${{ steps.strings.outputs.build-output-dir }}/lib/*.a ./
        
        for f in * ; do libsfound="$libsfound $f" ; done
        xcrun libtool -static -o libprojcomplete.a $libsfound
        ls -oh ./
        cp libprojcomplete.a ${{ steps.strings.outputs.build-output-dir }}/lib/libproj.a
        ls -oh ${{ steps.strings.outputs.build-output-dir }}/lib/

    #- name: Add msbuild to PATH
    #  if: ${{ matrix.os == 'windows-latest' }}
    #  uses: microsoft/setup-msbuild@v2
  
    - name: Combine static libraries (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      shell: bash
      run: |
        cp ./.vcpkg/installed/x64-windows-static/lib/*.lib ${{ steps.strings.outputs.build-output-dir }}/lib/
        cd ${{ steps.strings.outputs.build-output-dir }}/lib
        ls "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/"
        for f in C:/Program\ Files/Microsoft\ Visual\ Studio/2022/Enterprise/VC/Tools/MSVC/* ; do toolsdir="$f" ; done
        rm jpeg.lib
        for f in * ; do libsfound="$libsfound $f" ; done
        #14.39.33519
        "$toolsdir/bin/Hostx64/x64/lib.exe" /OUT:libproj._lib $libsfound
        rm *.lib
        mv libproj._lib libproj.lib
        ls -oh

    - name: Build Artifact
      shell: bash
      run: |
        rm -rf ${{ steps.strings.outputs.build-output-dir }}/include
        mkdir -p ${{ steps.strings.outputs.build-output-dir }}/include
        cp ./include/proj/*.hpp ${{ steps.strings.outputs.build-output-dir }}/include
        cp ./src/proj.h ${{ steps.strings.outputs.build-output-dir }}/include
        touch ${{ steps.strings.outputs.build-output-dir }}/viscan-${{ matrix.platform }}.${{ matrix.arch }}-${{ matrix.c_compiler }}.libproj-release-${{ steps.strings.outputs.tag }}

    - name: Compress Artifacts (Linux + Mac)
      if: ${{ matrix.os != 'windows-latest' }}
      shell: bash
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        zip -r -q ./${{ matrix.platform }}.${{ matrix.arch }}-${{ matrix.c_compiler }}.libproj.zip ./include ./lib viscan-${{ matrix.platform }}.${{ matrix.arch }}-${{ matrix.c_compiler }}.libproj-release-${{ steps.strings.outputs.tag }}


    - name: Compress Artifacts (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        Compress-Archive -Path ./include,./lib,viscan-${{ matrix.platform }}.${{ matrix.arch }}-${{ matrix.c_compiler }}.libproj-release-${{ steps.strings.outputs.tag }} -DestinationPath ./${{ matrix.platform }}.${{ matrix.arch }}-${{ matrix.c_compiler }}.libproj.zip 
      
#    - name: Test
#      working-directory: ${{ steps.strings.outputs.build-output-dir }}
#      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

#    - name: Generate coverage report (GCC)
#      uses: threeal/gcovr-action@v1.0.0
#      if: ${{ (matrix.os != 'macos-latest' &&  matrix.c_compiler == 'gcc') && (matrix.c_compiler != 'clang_ios_sim' &&  matrix.c_compiler != 'clang_ios_os') }}
#      with:
#        fail-under-line: 90
#        excludes: |
#          test/*
#          sample/*
#          build/*

#    - name: Generate coverage report (CLANG)
#      uses: threeal/gcovr-action@v1.0.0
#      if: ${{ (matrix.os != 'macos-latest' &&  matrix.c_compiler == 'clang') && (matrix.c_compiler != 'clang_ios_sim' &&  matrix.c_compiler != 'clang_ios_os') }}
#      with:
#        fail-under-line: 90
#        gcov-executable: llvm-cov gcov
#        excludes: |
#          test/*
#          sample/*
#          build/*

    #- name: Upload release assets
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ needs.create_release.outputs.upload_url }}
    #    # This is how it will be named on the release page. Put hatever name
    #    # you like, remember that they need to be different for each platform.
    #    # You can choose any build matrix parameters. For Rust I use the
    #    # target triple.
    #    asset_name: libCoordTrafo-${{ matrix.config.os }}.a
    #    # The path to the file you want to upload.
    #    asset_path: ${{ steps.strings.outputs.build-output-dir }}/lib/Linux/libCoordTrafo.a
    #    # probably you will need to change it, but most likely you are
    #    # uploading a binary file
    #    asset_content_type: application/octet-stream
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ${{ steps.strings.outputs.build-output-dir }}/*.zip

#  trigger_update:
#    name: Trigger framework update
#    needs: release_assets
#    runs-on: ubuntu-latest
#    steps:
#    - name: Repository Dispatch
#      uses: peter-evans/repository-dispatch@v2
#      with:
#        token: ${{ secrets.TRIGGER_FW_UPDATE }}
#        repository: viscan-de/framework-ios-coordinate-transformation
#        event-type: libCoordTrafoRelease
